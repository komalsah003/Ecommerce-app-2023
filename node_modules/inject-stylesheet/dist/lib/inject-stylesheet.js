"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectStylesheet = void 0;
var validate_selector_1 = require("./validate-selector");
var filter_style_keys_1 = require("./filter-style-keys");
var filter_style_values_1 = require("./filter-style-values");
function isSelectorMediaQuery(selector) {
    return /^@media\s+/i.test(selector);
}
function buildRule(selector, styles, curriedKeysFilter) {
    if (styles === void 0) { styles = {}; }
    var result;
    var constructedRule = selector + "{";
    if (isSelectorMediaQuery(selector)) {
        Object.keys(styles).forEach(function (innerSelector) {
            if (!(0, validate_selector_1.validateSelector)(innerSelector)) {
                return;
            }
            constructedRule += buildRule(innerSelector, styles[innerSelector], curriedKeysFilter);
        });
    }
    else {
        result = curriedKeysFilter(styles);
        var sanitized_1 = (0, filter_style_values_1.filterStyleValues)(result);
        Object.keys(sanitized_1).forEach(function (rule) {
            constructedRule += rule + ":" + sanitized_1[rule] + ";";
        });
    }
    constructedRule += "}";
    return constructedRule;
}
function injectStylesheet(styles, propertyList, isAllowlist) {
    if (styles === void 0) { styles = {}; }
    if (propertyList === void 0) { propertyList = []; }
    var position = 0;
    var styleElement = document.createElement("style");
    document.querySelector("head").appendChild(styleElement);
    var stylesheet = styleElement.sheet;
    function curriedKeysFilter(styleObject) {
        return (0, filter_style_keys_1.filterStyleKeys)(styleObject, propertyList, isAllowlist);
    }
    Object.keys(styles).forEach(function (selector) {
        if (!(0, validate_selector_1.validateSelector)(selector)) {
            return;
        }
        var constructedRule = buildRule(selector, styles[selector], curriedKeysFilter);
        try {
            if (stylesheet.insertRule) {
                stylesheet.insertRule(constructedRule, position);
            }
            else {
                stylesheet.addRule(selector, constructedRule.replace(/^[^{]+/, "").replace(/[{}]/g, ""), position);
            }
            position++;
        }
        catch (err) {
            if (!(err instanceof SyntaxError || err instanceof DOMException)) {
                throw err;
            }
        }
    });
    return styleElement;
}
exports.injectStylesheet = injectStylesheet;
