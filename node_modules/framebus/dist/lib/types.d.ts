declare global {
    interface Window {
        Window: () => Window;
    }
}
declare type ReplyFunction = (...args: unknown[]) => void;
export declare type FramebusPayload = {
    data?: string;
    event: string;
    origin: string;
    reply?: string | ReplyFunction;
    eventData?: FramebusSubscriberArg;
};
export declare type FramebusSubscriberArg = Record<string, unknown>;
export declare type FramebusSubscribeHandler = (data?: FramebusSubscriberArg | FramebusSubscribeHandler, reply?: FramebusSubscribeHandler) => void;
declare type FramebusSubscription = Record<string, FramebusSubscribeHandler[]>;
export declare type FramebusSubscriber = Record<string, FramebusSubscription>;
export declare type FramebusReplyHandler = (data: unknown) => void;
export declare type FramebusOnHandler = (data: FramebusSubscriberArg, reply: FramebusReplyHandler) => void;
export {};
